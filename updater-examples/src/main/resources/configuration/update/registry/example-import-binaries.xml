<?xml version="1.0" encoding="UTF-8"?>
<sv:node sv:name="Example - Import Asset and Image Set Content" xmlns:sv="http://www.jcp.org/jcr/sv/1.0">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposys:updaterinfo</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:batchsize" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:description" sv:type="String">
    <sv:value>A demo script to import asset and image set content.</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:dryrun" sv:type="Boolean">
    <sv:value>true</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:parameters" sv:type="String">
    <sv:value>{&#xd;
  "sourceBaseFolderPath": "file:${java.io.tmpdir}/content-exim-demo/bindata/"
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:query" sv:type="String">
    <sv:value>/jcr:root</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:script" sv:type="String">
    <sv:value>package org.hippoecm.frontend.plugins.cms.admin.updater&#xd;
&#xd;
import java.io.*&#xd;
import javax.jcr.*&#xd;
import org.apache.commons.io.*&#xd;
import org.apache.commons.lang.*&#xd;
import org.apache.commons.lang.text.*&#xd;
import org.apache.commons.vfs2.*&#xd;
import org.hippoecm.repository.api.*&#xd;
import org.onehippo.repository.update.BaseNodeUpdateVisitor&#xd;
import org.onehippo.forge.content.pojo.model.*&#xd;
import org.onehippo.forge.content.exim.core.*&#xd;
import org.onehippo.forge.content.exim.core.impl.*&#xd;
import org.onehippo.forge.content.exim.core.util.*&#xd;
&#xd;
class ImportingAssetOrImageSetFromJsonFileUpdateVisitor extends BaseNodeUpdateVisitor {&#xd;
&#xd;
  def documentManager&#xd;
  def importTask&#xd;
  def sourceBaseFolder&#xd;
&#xd;
  void initialize(Session session) {&#xd;
    def sourceBaseFolderPath = StrSubstitutor.replaceSystemProperties(parametersMap.get("sourceBaseFolderPath"))&#xd;
    sourceBaseFolder = VFS.getManager().resolveFile(sourceBaseFolderPath)&#xd;
&#xd;
    documentManager = new WorkflowDocumentManagerImpl(session)&#xd;
    importTask = new DefaultBinaryImportTask(documentManager)&#xd;
    importTask.setLogger(log)&#xd;
    importTask.start()&#xd;
  }&#xd;
&#xd;
  boolean doUpdate(Node node) {&#xd;
    def contentNode&#xd;
    def binaryPrimaryTypeName&#xd;
    def binaryFolderPrimaryTypeName&#xd;
    def binaryFolderFolderTypes&#xd;
    def binaryFolderGalleryTypes&#xd;
    def binaryLocation&#xd;
    def binaryFolderPath&#xd;
    def binaryName&#xd;
    def updatedBinaryLocation&#xd;
&#xd;
    def files = importTask.findFilesByNamePattern(sourceBaseFolder, "^.+\\.json\$" , 1, 10)&#xd;
    def record&#xd;
&#xd;
    files.eachWithIndex { file, i ->&#xd;
      try {&#xd;
        // read ContentNode from json file.&#xd;
        contentNode = importTask.readContentNodeFromJsonFile(file)&#xd;
        binaryPrimaryTypeName = contentNode.getPrimaryType()&#xd;
        // determine the target binary handle node path to create or update binary content from the jcr:path meta property in ContentNode object.&#xd;
        binaryLocation = contentNode.getProperty("jcr:path").getValue()&#xd;
&#xd;
        // record instance to store execution status and detail of a unit of migration work item.&#xd;
        // these record instances will be collected and summarized when #logSummary() invoked later.&#xd;
        record = importTask.beginRecord("", binaryLocation)&#xd;
        record.setAttribute("file", file.name.path)&#xd;
&#xd;
        if (binaryPrimaryTypeName == "hippogallery:imageset" || binaryPrimaryTypeName == "hippogallery:exampleAssetSet") {&#xd;
          record.setProcessed(true)&#xd;
          // split target folder path and binary handle node name from the binaryLocation.&#xd;
          def folderPathAndName = ContentPathUtils.splitToFolderPathAndName(binaryLocation)&#xd;
          binaryFolderPath = folderPathAndName[0]&#xd;
          binaryName = folderPathAndName[1]&#xd;
&#xd;
          // choose proper binary node type, hippostd:foldertype and hippostd:gallerytype values for either gallery image or asset.&#xd;
          if (binaryPrimaryTypeName == "hippogallery:imageset") {&#xd;
            binaryFolderPrimaryTypeName = "hippogallery:stdImageGallery"&#xd;
            binaryFolderFolderTypes = [ "new-image-folder" ] as String[]&#xd;
            binaryFolderGalleryTypes = [ "hippogallery:imageset" ] as String[]&#xd;
          } else if (binaryPrimaryTypeName == "hippogallery:exampleAssetSet") {&#xd;
            binaryFolderPrimaryTypeName = "hippogallery:stdAssetGallery"&#xd;
            binaryFolderFolderTypes = [ "new-file-folder" ] as String[]&#xd;
            binaryFolderGalleryTypes = [ "hippogallery:exampleAssetSet" ] as String[]&#xd;
          }&#xd;
&#xd;
          // make sure that the binary target folder exists or created.&#xd;
          binaryFolderPath =&#xd;
              importTask.createOrUpdateBinaryFolder(binaryFolderPath, binaryFolderPrimaryTypeName,&#xd;
                                                    binaryFolderFolderTypes, binaryFolderGalleryTypes)&#xd;
&#xd;
          // create or update binary content from contentNode.&#xd;
          updatedBinaryLocation =&#xd;
              importTask.createOrUpdateBinaryFromContentNode(contentNode, binaryPrimaryTypeName,&#xd;
                                                             binaryFolderPath, binaryName)&#xd;
&#xd;
          visitorContext.reportUpdated(binaryLocation)&#xd;
          log.debug "Imported binary from '${file.name.path}' to '${updatedBinaryLocation}'."&#xd;
          record.setSucceeded(true)&#xd;
        } else {&#xd;
          visitorContext.reportSkipped(documentLocation)&#xd;
        }&#xd;
      } catch (e) {&#xd;
        log.error("Failed to process record.", e)&#xd;
        visitorContext.reportFailed(binaryLocation)&#xd;
        record.setErrorMessage(e.toString())&#xd;
      } finally {&#xd;
        importTask.endRecord()&#xd;
      }&#xd;
    }&#xd;
&#xd;
    return false&#xd;
  }&#xd;
&#xd;
  boolean undoUpdate(Node node) {&#xd;
    throw new UnsupportedOperationException('Updater does not implement undoUpdate method')&#xd;
  }&#xd;
&#xd;
  void destroy() {&#xd;
    importTask.stop()&#xd;
    importTask.logSummary()&#xd;
  }&#xd;
&#xd;
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:throttle" sv:type="Long">
    <sv:value>1000</sv:value>
  </sv:property>
</sv:node>
