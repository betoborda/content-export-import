<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
    Copyright 2018 Hippo

    Licensed under the Apache License, Version 2.0 (the  "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS"
    BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<document>
  <properties>
    <title>Built-in REST Services</title>
  </properties>
  <body>

    <section name="Built-in REST Services">

      <div class="alert alert-info">
        This feature has been available since v2.1.2. See <a href="release-notes.html">Release Notes</a>.
      </div>

      <subsection name="Introduction">

        <p>
          The Built-in REST Services provides a generic content exporting, importing and monitoring functionalities
          with flexible options based on the accumulated experiences and best practices.
        </p>

        <p>
          The following URI endpoints are provided (assuming the base path of the
          <a href="https://www.onehippo.org/library/concepts/hippo-services/repository-jaxrs-service.html" taret="_blank">Repository JAX-RS Service</a>
          in CMS web application is <code>/cms/ws</code>):
        </p>
        <ul>
          <li>POST <code>/cms/ws/exim/export</code></li>
          <li>POST <code>/cms/ws/exim/import</code></li>
          <li>GET <code>/cms/ws/exim/ps</code></li>
          <li>GET <code>/cms/ws/exim/ps/&lt;PID&gt;</code></li>
          <li>GET <code>/cms/ws/exim/ps/&lt;PID&gt;/logs</code></li>
        </ul>

        <p>
          Both endpoints consumes <code>multipart/form-data</code> requests.
        </p>
        <p>
          The endpoint for content exporting (<code>/cms/ws/exim/export</code>) produces a <code>application/octet-stream</code>
          response containing a content package ZIP file.
        </p>
        <p>
          The endpoint for content importing (<code>/cms/ws/exim/import</code>) reads a ZIP file contained in the
          <code>multipart/form-data</code> request body, process the content package ZIP file and produces a <code>multipart/mixed</code>
          response body that contains the execution log file and the execution summary in JSON format.
        </p>
        <p>
          The endpoint for content process status (<code>/cms/ws/exim/ps</code>) prints the status information
          of all the Content Export/Import execution processes.
        </p>
        <p>
          The endpoint for content process status (<code>/cms/ws/exim/ps/&lt;PID&gt;</code>) prints the status information
          of the specified Content Export/Import process.
        </p>
        <p>
          The endpoint for content process status (<code>/cms/ws/exim/ps/&lt;PID&gt;/logs</code>) prints the log file
          generated by the specified Content Export/Import process.
        </p>
        <p>
          Find more information below.
        </p>

      </subsection>

      <subsection name="Configuration">

        <p>
          After you install the Built-in REST Services module following the <a href="install.html">Installation</a> page,
          you need to <a href="https://www.onehippo.org/library/concepts/hippo-services/repository-jaxrs-service.html" target="_blank">Configure REST endpoint authorization</a> for the services.
        </p>
        <p>
          The authorization for the Built-in REST Services is set to the <code>hippo:rest</code> permission.
          Therefore, you need to configure a domain rule for the <code>context-exim</code> addon module with the permission
          (i.e. <code>hipposys:role: restuser</code>) for specific group(s) or user(s) like the following example:
        </p>
        <div class="brush: plain">
          <source><![CDATA[
    /hippo:configuration/hippo:domains/content-exim:
      jcr:primaryType: hipposys:domain
      /rest:
        jcr:primaryType: hipposys:authrole
        hipposys:groups: [admin]
        hipposys:role: restuser
      /module-domain:
        jcr:primaryType: hipposys:domainrule
        /module:
          jcr:primaryType: hipposys:facetrule
          hipposys:equals: true
          hipposys:facet: jcr:path
          hipposys:filter: false
          hipposys:type: Reference
          hipposys:value: /hippo:configuration/hippo:modules/content-exim
          ]]></source>
        </div>
        <p>
          You can simply copy the above configuration to your environment through CMS Console in most cases
          where you simply allow this Built-in REST Services only to 'admin' group users.
        </p>

      </subsection>

      <subsection name="Content Exporting REST Service">

        <p>
          The signature of the content importing JAX-RS Service looks like the following:
        </p>

        <div class="brush: java">
          <source><![CDATA[
    @Path("/exim/export")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_OCTET_STREAM)
    @POST
    public Response exportContentToZip(@Multipart(value = "batchSize", required = false) String batchSizeParam,
            @Multipart(value = "throttle", required = false) String throttleParam,
            @Multipart(value = "dataUrlSizeThreshold", required = false) String dataUrlSizeThresholdParam,
            @Multipart(value = "docbasePropNames", required = false) String docbasePropNamesParam,
            @Multipart(value = "documentTags", required = false) String documentTagsParam,
            @Multipart(value = "binaryTags", required = false) String binaryTagsParam,
            @Multipart(value = "paramsJson", required = false) String paramsJsonParam,
            @Multipart(value = "params", required = false) Attachment paramsAttachment) {
        // SNIP
    }
          ]]></source>
        </div>

        <p>
          This service tries to parse an <a href="execution-params.html">ExecutionParams</a> from <code>params</code> file attachment if provided.
          If <code>params</code> file attachment is not found,
          then it tries to parse one from <code>paramsJson</code> form parameter instead.
          If neither is found, then it will produce an empty ZIP file with error messages.
        </p>

        <p>
          Other optional form parameters such as <code>batchSize</code>, <code>throttle</code>, <code>dataUrlSizeThreshold</code>, etc.
          can be used to <strong>override</strong> the parsed <a href="execution-params.html">ExecutionParams</a> object afterward if provided.
        </p>

      </subsection>

      <subsection name="Content Importing REST Service">

        <p>
          The signature of the content importing JAX-RS Service looks like the following:
        </p>

        <div class="brush: java">
          <source><![CDATA[
    @Path("/exim/import")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces("multipart/mixed")
    @POST
    public Response importContentFromZip(@Multipart(value = "batchSize", required = false) String batchSizeParam,
            @Multipart(value = "throttle", required = false) String throttleParam,
            @Multipart(value = "publishOnImport", required = false) String publishOnImportParam,
            @Multipart(value = "dataUrlSizeThreshold", required = false) String dataUrlSizeThresholdParam,
            @Multipart(value = "docbasePropNames", required = false) String docbasePropNamesParam,
            @Multipart(value = "documentTags", required = false) String documentTagsParam,
            @Multipart(value = "binaryTags", required = false) String binaryTagsParam,
            @Multipart(value = "paramsJson", required = false) String paramsJsonParam,
            @Multipart(value = "params", required = false) Attachment paramsAttachment,
            @Multipart(value = "package", required = true) Attachment packageAttachment)
        // SNIP
    }
          ]]></source>
        </div>

        <p>
          This service requires <code>package</code> file attachment which is used as the source to import content from.
          The attachment must be a ZIP file in the same format used in content exporting process.
        </p>

        <p>
          This service tries to parse an <a href="execution-params.html">ExecutionParams</a> from <code>params</code> file attachment if provided.
          If <code>params</code> file attachment is not found,
          then it tries to parse one from <code>paramsJson</code> form parameter instead.
          If neither is found, then it will use the default parameters instead.
        </p>

        <p>
          Other optional form parameters such as <code>batchSize</code>, <code>throttle</code>, <code>publishOnImport</code>, etc.
          can be used to <strong>override</strong> the parsed <a href="execution-params.html">ExecutionParams</a> object afterward if provided.
        </p>

        <p>
          The response output contains both the execution log file data and summary JSON data if successful.
        </p>

      </subsection>

      <subsection name="Process Status Monitoring REST Service">

        <p>
          The signatures of the process monitoring JAX-RS Service look like the following:
        </p>

        <div class="brush: java">
          <source><![CDATA[
    @Path("/exim/ps")
    @Produces(MediaType.TEXT_PLAIN)
    @GET
    public String getAllProcessInfos() {
        // SNIP
    }

    @Path("/exim/ps/{id}")
    @Produces("multipart/mixed")
    @GET
    public List<Attachment> getProcessInfo(@PathParam("id") long processId) {
        // SNIP
    }

    @Path("/exim/ps/{id}/logs")
    @Produces(MediaType.TEXT_PLAIN)
    @GET
    public String getLogsOfProcess(@PathParam("id") long processId) {
        // SNIP
    }
          ]]></source>
        </div>

        <p>
          The <code>id</code> path parameters should be found in the <code>/exim/ps</code> result.
        </p>

      </subsection>

    </section>

  </body>
</document>
